name: codecov-rs CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (rustfmt + clippy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
          components: clippy, rustfmt
      - name: Run lint
        run: make lint.rust

  lint-python:
    name: Lint Python (ruff, mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v3
      - name: Set up venv
        run: make ci.setup_venv
      - name: Build and run lint
        run: |
          maturin develop
          make lint.python

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
      - name: Run Rust tests
        run: |
          cargo test --features testing

      - uses: actions/setup-python@v3
      - name: Set up venv
        run: make ci.setup_venv
      - name: Run Python tests
        run: |
          maturin develop
          pytest

  # This job runs tests, generates coverage data, and generates JUnit test
  # results in a single test invocation and then uploads it all to Codecov.
  # However, it doesn't print test results to stdout. If Codecov's failed test
  # reporting is solid and we never need to see the results in the CI logs, we
  # can delete the "normal" test step and just use this.
  test-for-codecov:
    name: Test (Upload to Codecov)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
      - name: Install `cargo llvm-cov`
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run tests
        run: |
          cargo install cargo2junit
          cargo llvm-cov --lcov --output-path core.lcov -- --features testing -Z unstable-options --format json --report-time | cargo2junit > core-test-results.xml

      - uses: actions/setup-python@v3
      - name: Set up venv
        run: make ci.setup_venv
      - name: Run Python tests
        run: |
          # Clear prior profile data
          cargo llvm-cov clean --workspace

          # Set env vars so maturin will build our Rust code with coverage instrumentation
          source <(cargo llvm-cov show-env --export-prefix)
          maturin develop

          # Run Python tests. Any Rust code exercised by these tests will emit coverage data
          pytest --cov --junitxml=python-test-results.xml

          # Turn the Rust coverage data into an lcov file
          cargo llvm-cov --no-run --lcov --output-path bindings.lcov

      - name: Upload coverage data to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v4
        with:
          files: ./core.lcov,./bindings.lcov,./.coverage
          token: ${{ secrets.CODECOV_ORG_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          files: ./core-test-results.xml,./python-test-results.xml
          token: ${{ secrets.CODECOV_ORG_TOKEN }}
          verbose: true
